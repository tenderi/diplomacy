name: Deploy Diplomacy Bot to AWS

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build-test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: diplomacy
          POSTGRES_PASSWORD: diplomacy
          POSTGRES_DB: diplomacy
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U diplomacy" --health-interval 10s --health-timeout 5s --health-retries 5
    env:
      SQLALCHEMY_DATABASE_URL: postgresql+psycopg2://diplomacy:diplomacy@localhost:5432/diplomacy
      TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
      DIPLOMACY_API_URL: http://localhost:8000
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r new_implementation/requirements.txt
          pip install pytest pytest-asyncio
      - name: Run Alembic migrations
        run: |
          cd new_implementation
          alembic upgrade head
      - name: Run tests
        run: pytest new_implementation/src/

  docker-build-push:
    needs: build-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/github-actions-oidc
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
      - name: Get version tag
        id: get_version
        run: |
          GIT_TAG=$(git describe --tags --abbrev=0 || echo "v0.0.0")
          SHORT_SHA=$(git rev-parse --short HEAD)
          echo "tag=${GIT_TAG}" >> $GITHUB_OUTPUT
          echo "sha=${SHORT_SHA}" >> $GITHUB_OUTPUT
      - name: Build and push Docker image to ECR
        uses: docker/build-push-action@v5
        with:
          context: ./new_implementation
          file: ./new_implementation/Dockerfile
          push: true
          tags: |
            ${{ steps.login-ecr.outputs.registry }}/diplomacy-app:latest
            ${{ steps.login-ecr.outputs.registry }}/diplomacy-app:${{ steps.get_version.outputs.tag }}
            ${{ steps.login-ecr.outputs.registry }}/diplomacy-app:${{ steps.get_version.outputs.sha }}

# To enable deployment, add a job here for your target (e.g., server, cloud, k8s, etc.)
# and use secrets for credentials. See README for deployment instructions. 