name: Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.10, 3.11, 3.12]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Lint with ruff
      run: |
        pip install ruff
        ruff check src/ --output-format=github

    - name: Run unit tests
      run: |
        pytest src/tests/ -m unit --cov=src/engine --cov=src/server --cov-report=xml --cov-report=term-missing --cov-fail-under=85

    - name: Set up PostgreSQL
      if: matrix.python-version == '3.11'
      uses: actions/setup-postgresql@v1
      with:
        postgresql-version: '14'
        postgresql-db: 'diplomacy_db'
        postgresql-user: 'diplomacy_user'
        postgresql-password: 'password'

    - name: Run database migrations
      if: matrix.python-version == '3.11'
      env:
        SQLALCHEMY_DATABASE_URL: postgresql+psycopg2://diplomacy_user:password@localhost:5432/diplomacy_db
      run: |
        cd new_implementation || cd .
        alembic upgrade head || echo "Migration skipped if tables exist"

    - name: Run integration tests (with DB)
      if: matrix.python-version == '3.11'
      env:
        SQLALCHEMY_DATABASE_URL: postgresql+psycopg2://diplomacy_user:password@localhost:5432/diplomacy_db
      run: |
        pytest src/tests/ -m integration --cov=src/engine --cov=src/server --cov-report=xml --cov-report=term-missing --cov-fail-under=85
      
    - name: Run integration tests (skip DB tests)
      if: matrix.python-version != '3.11'
      run: |
        pytest src/tests/ -m "integration and not database" --cov=src/engine --cov=src/server --cov-report=xml --cov-report=term-missing --cov-fail-under=85 || pytest src/tests/ -m integration --cov=src/engine --cov=src/server --cov-report=xml --cov-report=term-missing || true

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: true

    - name: Comment coverage on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const coverage = fs.readFileSync('coverage.xml', 'utf8');
          const coverageMatch = coverage.match(/line-rate="([^"]+)"/);
          const coveragePercent = coverageMatch ? Math.round(parseFloat(coverageMatch[1]) * 100) : 'Unknown';
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `## Test Coverage Report ðŸ“Š
            
            **Coverage: ${coveragePercent}%**
            
            âœ… All tests passed on Python ${{ matrix.python-version }}
            
            <details>
            <summary>View detailed coverage report</summary>
            
            Coverage details are available in the workflow logs.
            </details>`
          });

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit

    - name: Run safety check
      run: safety check -r requirements.txt

    - name: Run bandit security check
      run: bandit -r src/ -f json -o bandit-report.json || true

    - name: Upload bandit results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: bandit-report
        path: bandit-report.json
